package solana

import (
	"github.com/BRBussy/solgo/internal/pkg/encoding"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestSignatures_Compact(t *testing.T) {
	tests := []struct {
		name string
		s    Signatures
		want encoding.CompactArray
	}{
		{
			name: "compacting success",
			s: Signatures{
				{
					0xff, 0x22, 0x16, 0xa, 0x8f, 0x3e, 0x17, 0x37,
					0x02, 0x12, 0x16, 0xc, 0x6f, 0x5e, 0x14, 0x98,
					0x01, 0x02, 0xa1, 0x1, 0x5f, 0x6e, 0x1e, 0x58,
					0x14, 0xd6, 0x18, 0xc, 0x43, 0x6e, 0x1a, 0x92,
					0x12, 0x62, 0x48, 0x3, 0xf4, 0x2e, 0x1e, 0x22,
					0x11, 0xf6, 0x48, 0xc, 0x25, 0x2e, 0x1f, 0x91,
					0x20, 0x42, 0x51, 0xc, 0xf4, 0x32, 0x1e, 0x19,
					0x41, 0x46, 0x38, 0xc, 0xf2, 0xfe, 0x42, 0x21,
				},
				{
					0xcf, 0x32, 0x16, 0xa, 0x7f, 0x3e, 0x17, 0x37,
					0xb2, 0x1c, 0x16, 0x1c, 0x6f, 0x5f, 0x14, 0x98,
					0x01, 0x02, 0x31, 0x1, 0x5f, 0x6e, 0x13, 0x58,
					0x12, 0xd6, 0xa8, 0xc, 0x43, 0x6e, 0x1a, 0x92,
					0x12, 0x62, 0x28, 0xa3, 0xf4, 0x2e, 0x1e, 0x22,
					0x11, 0xff, 0x48, 0xc, 0x25, 0x2e, 0x1f, 0x91,
					0x2e, 0x42, 0x51, 0xc, 0xf4, 0x32, 0x1e, 0x19,
					0x43, 0x46, 0x38, 0xc, 0xf2, 0xfe, 0x42, 0x25,
				},
				{
					0xcf, 0x32, 0x16, 0xa, 0xbf, 0xce, 0x17, 0x37,
					0xb2, 0x1c, 0x16, 0xdc, 0x6f, 0xaf, 0x14, 0x98,
					0x01, 0x02, 0xe1, 0x1, 0x0f, 0x6e, 0x13, 0x58,
					0x12, 0x06, 0xa8, 0xc, 0x43, 0x6e, 0x1a, 0x92,
					0x12, 0x12, 0x08, 0xa3, 0xf4, 0x2e, 0x1e, 0x22,
					0x11, 0x8f, 0x48, 0xc, 0x25, 0x2e, 0x1f, 0x91,
					0x24, 0x42, 0x51, 0xc, 0xf4, 0x32, 0x1e, 0x19,
					0x43, 0x46, 0x38, 0xc, 0xf2, 0xfe, 0x42, 0x25,
				},
			},
			want: encoding.CompactArray{
				Length: 3,
				Data: []byte{
					0xff, 0x22, 0x16, 0xa, 0x8f, 0x3e, 0x17, 0x37,
					0x02, 0x12, 0x16, 0xc, 0x6f, 0x5e, 0x14, 0x98,
					0x01, 0x02, 0xa1, 0x1, 0x5f, 0x6e, 0x1e, 0x58,
					0x14, 0xd6, 0x18, 0xc, 0x43, 0x6e, 0x1a, 0x92,
					0x12, 0x62, 0x48, 0x3, 0xf4, 0x2e, 0x1e, 0x22,
					0x11, 0xf6, 0x48, 0xc, 0x25, 0x2e, 0x1f, 0x91,
					0x20, 0x42, 0x51, 0xc, 0xf4, 0x32, 0x1e, 0x19,
					0x41, 0x46, 0x38, 0xc, 0xf2, 0xfe, 0x42, 0x21,

					0xcf, 0x32, 0x16, 0xa, 0x7f, 0x3e, 0x17, 0x37,
					0xb2, 0x1c, 0x16, 0x1c, 0x6f, 0x5f, 0x14, 0x98,
					0x01, 0x02, 0x31, 0x1, 0x5f, 0x6e, 0x13, 0x58,
					0x12, 0xd6, 0xa8, 0xc, 0x43, 0x6e, 0x1a, 0x92,
					0x12, 0x62, 0x28, 0xa3, 0xf4, 0x2e, 0x1e, 0x22,
					0x11, 0xff, 0x48, 0xc, 0x25, 0x2e, 0x1f, 0x91,
					0x2e, 0x42, 0x51, 0xc, 0xf4, 0x32, 0x1e, 0x19,
					0x43, 0x46, 0x38, 0xc, 0xf2, 0xfe, 0x42, 0x25,

					0xcf, 0x32, 0x16, 0xa, 0xbf, 0xce, 0x17, 0x37,
					0xb2, 0x1c, 0x16, 0xdc, 0x6f, 0xaf, 0x14, 0x98,
					0x01, 0x02, 0xe1, 0x1, 0x0f, 0x6e, 0x13, 0x58,
					0x12, 0x06, 0xa8, 0xc, 0x43, 0x6e, 0x1a, 0x92,
					0x12, 0x12, 0x08, 0xa3, 0xf4, 0x2e, 0x1e, 0x22,
					0x11, 0x8f, 0x48, 0xc, 0x25, 0x2e, 0x1f, 0x91,
					0x24, 0x42, 0x51, 0xc, 0xf4, 0x32, 0x1e, 0x19,
					0x43, 0x46, 0x38, 0xc, 0xf2, 0xfe, 0x42, 0x25,
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := tt.s.Compact()
			require.Equal(t, tt.want, got)
		})
	}
}
